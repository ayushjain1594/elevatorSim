from elevator import Elevator

class ElevatorControl:
	"""Object of this class have one or more Elevator objects in 
	its control to serve the simulation requests generated by 
	TrafficGenerator objects"""

	def __init__(self, sim_env, control_id, floors: tuple, num_elevators: int, 
		floor_height: float, max_speed: float, max_accel: float):

		self.ec_id = control_id
		self.env = sim_env
		if type(num_elevators) == 'int':
			self.elevators = {e_id: Elevator(sim_env, floors, floor_height, 
				max_speed, max_accel) 
			for e_id in range(1, num_elevators)
			}
		else:
			raise ValueError('Number of elevators must be integer')


	def get_current_states(self):
		"""Method returns states of each elevator that is 
		in control by self"""

	def request_service(self):
		"""Method is the primary process created by a request in
		simulation. The method further calls other processes such as -

		Check if one of its elevators are at same floor as of request.
		If not, decide which elevator will be assigned for the request.
		Add request to assigned elevator's tasks and yield until elevator
		finishes the task.

		The most crucial part is the elevator's fulfilment of task. The 
		elevator should not process these tasks as FIFO as it is inefficient.

		Some tasks could be completed which working on others. For instance,
		if there is a request from floor 1 to 5 and another request from 2 to 4,
		the elevator must perform 1-2-4-5 even if 2 to 4 request came 
		after 1 to 5. This is to be handled by ElevatorControl which takes in 
		the request and converts them into tasks for elevator."""